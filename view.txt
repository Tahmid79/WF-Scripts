(function (angular, appSuite) {
    "use strict";

    function constructor($scope, $http, $mdMedia, $location, SLPCConfig, shellInfrastructure, workflowService, WorkflowConfig, $state, policyformService, $mdDialog, shellView, slpcSlpcConfigUtilService, slpcConfigWorkflowService) {

        var vm = this;
        shellView.appendViewHelper(vm);
        vm.formData = {};
        vm.currency = [];
        vm.$mdMedia = $mdMedia;
        vm.market = $location.search().market;
        // vm.formData.PAOneOrMoreDedicatedFundPercentOrAmount = 'AMOUNT';
        vm.pattern = SLPCConfig.InputValidationPattern;
        // vm.anotherDedicatedFund = ($location.search().ActivityId === 'AppProcessAllocation2') || ($location.search().ActivityId === 'AppProcessAllocation3') || ($location.search().ActivityId === 'AppProcessAllocation4');

        var entityObj = {
            activityId: "AppProcessInvestmentOfContract",
            workflowInstanceId: $location.search().workflowInstanceId,
            itemId: null,
            entityName: null,
            fields: [
                "AmountOrPercentReinvestment",
                "SecondDedicatedFundPercentValue",
                "SecondDedicatedFundAmountValue"
            ]
        };

        var modelTree = {
            "PAFirstDedicatedFundValue": "",
            "PASelfManagementPolicyHolder#value=false": {
                "PAFinancialManagerName": "",
                "PAFinancialManagerStreetNameAndNumber": "",
                "PAFinancialManagerPostCodeAndTown": "",
                "PAcountry": ""
            },
            "PAFinancialManagerContactPersonName": "",
            "PAFinancialManagerContactPersonFirstNameAppliacble#value=false": {
                "PAFinancialManagerContactPersonFirstName": ""
            },
            "IsContractTelephoneAvailable#value=false": {
                "PAFinancialManagerContactPersonTelephone": "",
            },
            "PAFinancialManagerContactPersonMobileNotApplicable#value=false": {
                "PAFinancialManagerContactPersonMobile": "",
            },
            "PAFinancialManagerContactPersonEmailNotApplicable#value=false": {
                "PAFinancialManagerContactPersonEmail": "",
            },
            "FirstContactPersonFaxNotAvailable#value=false": {
                "PAFinancialManagerContactPersonFax": ""
            },
            "PACustodianBankName": "",
            "PACustodianBankStreetNameAndNumber": "",
            "PACustodianBankPostCodeAndTown": "",
            "PAcustodyCountry": "",
            "PACustodianBankContactPersonName": "",
            "PACustodianBankContactPersonFirstNameApplicable#value=false": {
                "PACustodianBankContactPersonFirstName": ""
            },
            "IsContractSecondTelephoneAvailable#value=false": {
                "PACustodianBankContactPersonTelephone": "",
            },
            "PACustodianBankContactPersonMobileNotApplicable#value=false": {
                "PACustodianBankContactPersonMobile": "",
            },
            "PACustodianBankContactPersonEmailNotApplicable#value=false": {
                "PACustodianBankContactPersonEmail": "",
            },
            "SecondContactPersonFaxNotAvailable#value=false": {
                "PACustodianBankContactPersonFax": ""
            }
        }

        function onInitFormData() {
            vm.formData.PASelfManagementPolicyHolder = false;
            vm.formData.FirstContactPersonFaxNotAvailable = false;
            vm.formData.SecondContactPersonFaxNotAvailable = false;
            vm.formData.PAFinancialManagerContactPersonFirstNameAppliacble = false;
            vm.formData.PACustodianBankContactPersonFirstNameApplicable = false;
            vm.formData.PAFinancialManagerContactPersonMobileNotApplicable = false;
            vm.formData.PAFinancialManagerContactPersonEmailNotApplicable = false;
            vm.formData.PACustodianBankContactPersonMobileNotApplicable = false;
            vm.formData.PACustodianBankContactPersonEmailNotApplicable = false;
            vm.formData.IsContractTelephoneAvailable = false;
            vm.formData.IsContractSecondTelephoneAvailable = false;
        }

        function executeWorkflowForm(data) {
            if (data) {
                onInitFormData();
                vm.formData = JSON.parse(data.Entities[0].JsonString);
            } else {
                // delete vm.formData.IsContractTelephoneAvailable;
                // delete vm.formData.IsContractSecondTelephoneAvailable;
                $scope.switchFrDesignation2nd.$submitted = true;
                slpcSlpcConfigUtilService.cleanupModel(vm.formData, modelTree);
                if (!$scope.switchFrDesignation2nd.$invalid) {
                    vm.formData.RequestPayload = { itemId: $state.params.slpcworkflowId }
                    vm.formData["Tags"] = ["Is-A-AppProcessAllocation"];
                    workflowService.eventBroadcast(WorkflowConfig.registerCallBackFromChild, _.clone(vm.formData));
                }
            }
        }

        function getOtherCountryNationalityList() {
            var language = $location.search().language;
            policyformService.getCountryList(language, vm.countriesOfResidence).then(function (responseCountries) {
                vm.countriesOfResidence = responseCountries.otherCountry;
                // other country of residence
                vm.otherCountriesOfResidence = _.map(responseCountries.responseCountryList, "Name");
                vm.otherCountriesOfResidence = vm.otherCountriesOfResidence.filter(function (el) {
                    return !vm.countriesOfResidence.includes(el);
                });
            });
        }



        function resetAmountOrPercentField(property) {
            vm.formData[property] = '';
        }

        var showInfoModal = function ($event) {
            $mdDialog.show({
                templateUrl: vm.viewHelper.getTenantPath() + "app/workflows/switch-fr-designation-2nd/view/switch-fr-designation-2nd.info.modal.view.html",
                targetEvent: $event,
                controller: "slpcSwitchDesignation2ndInfoModalController",
                controllerAs: "vm",
                clickOutsideToClose: false,
                escapeToClose: false,
                locals: {
                    localizationObj: vm.localizationObj,
                    market: vm.market
                }
            }).then(function (answer) {
                vm.formData.PAThePolicyholder = answer;
            }, function () {
            });
        }

        vm.showInfoModal2 = function ($event) {
            $mdDialog.show({
                templateUrl: vm.viewHelper.getTenantPath() + "app/workflows/switch-fr-designation-2nd/view/switch-fr-designation-2nd.info.modal2.view.html",
                targetEvent: $event,
                controller: "slpcAppProcessAllocationSwitchInfoModal2Controller",
                controllerAs: "vm",
                clickOutsideToClose: false,
                escapeToClose: false,
                locals: {
                    localizationObj: vm.localizationObj
                }
            }).then(function (answer) {
                vm.formData.PAThePolicyholder = answer;
            }, function () {
            });
        }

        function getCommonData(getData) {
            getData.commonData().then(function (responseCommonData) {
                if (responseCommonData) {

                }
            });
            getData.processStatus().then(function (responseStatus) {
                vm.isFormReadonly = responseStatus;
            });
            getData.commonLanguage().then(function (responseLanguage) {
                vm.localizationObj = responseLanguage.data;
                vm.ohetrCountriesValue = vm.localizationObj.APP_PROCESS_ALLOCATION_SWITCH.APP_PROCESS_ALLOCATION_V2.COUNTRY_LIST.OTHER;
                // if (vm.market !== 'Spain' && vm.market !== 'Italy' && vm.market !== 'Portugal') {
                //     showInfoModal();
                // }
            });
            // getData.activityData(entityObj.activityId, entityObj.workflowInstanceId).then(function (response) {
            //     var appProcessInvestmentOfContract = JSON.parse(response.Entities[0].JsonString);
            //     vm.firstDedicatedFundPercentValue = appProcessInvestmentOfContract.SecondDedicatedFundPercentValue;
            //     vm.firstDedicatedFundAmountValue = appProcessInvestmentOfContract.SecondDedicatedFundAmountValue;
            //     if(Number.isInteger(vm.firstDedicatedFundPercentValue) === false){
            //         vm.firstDedicatedFundPercentValue = vm.firstDedicatedFundPercentValue.toFixed(2);
            //     }
            //     if(Number.isInteger(vm.firstDedicatedFundAmountValue === false)){
            //         vm.firstDedicatedFundAmountValue = vm.firstDedicatedFundAmountValue.toFixed(2);
            //     }
            //     // vm.firstDedicatedFundPercentValue = vm.firstDedicatedFundPercentValue.toFixed(2);
            //     // vm.firstDedicatedFundAmountValue = vm.firstDedicatedFundAmountValue.toFixed(2);
            // });
            var workflowInstanceId = $location.search().workflowInstanceId;
            slpcConfigWorkflowService.getEntityDataByWorkflowInstanceId(workflowInstanceId, entityObj.fields).then(function (responseFieldsData) {
                    var appProcessInvestmentOfContract = responseFieldsData;
                    vm.workflowName = responseFieldsData.WorkflowName;
                    vm.firstDedicatedFundPercentValue = appProcessInvestmentOfContract.SecondDedicatedFundPercentValue;
                    vm.firstDedicatedFundAmountValue = appProcessInvestmentOfContract.SecondDedicatedFundAmountValue;
                    if(appProcessInvestmentOfContract.AmountOrPercentReinvestment == 'AMOUNT'){
                          vm.checkAmount = true;
                    }
                     if(appProcessInvestmentOfContract.AmountOrPercentReinvestment == 'PERCENT'){
                        vm.checkPercent = true;
                  }


            });

        }

        function getCountryList() {
            policyformService.getCountryName().then(function (response) {
                vm.countryList = response;
            });
        }

        vm.$onInit = function () {
            onInitFormData();
            vm.countriesOfResidence = SLPCConfig.AppProcessAllocationCountryOfResidenceCustodianBank;
            getCountryList();
            getOtherCountryNationalityList();
            workflowService.eventRegister(WorkflowConfig.eventForDataTransition, getCommonData, 'switch-fr-designation-2nd');
            workflowService.eventRegister(WorkflowConfig.registerWorkflowExecuteCommand, executeWorkflowForm, 'switch-fr-designation-2nd');

        };

        vm.resetAmountOrPercentField = resetAmountOrPercentField;
    }

    constructor.$inject = ["$scope", "$http", "$mdMedia", "$location", "SLPCConfig", "shellInfrastructure", "workflowService", "WorkflowConfig", "$state", "policyformService", "$mdDialog", "shellView", "slpcSlpcConfigUtilService", "slpcConfigWorkflowService"];
    angular.module("slpc.switch-fr-designation-2nd").controller('slpcSwitchFrDesignation2ndController', constructor);
})(window.angular, window.appSuite);